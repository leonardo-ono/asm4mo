;===============================================================================
; Mem
;===============================================================================

	; public static constants
	; ----------------------------------------------------------------------
	Mem.VALUE_LENGTH	equ 8

	; public static properties
	; ----------------------------------------------------------------------
	Mem.validOperations:
		;                 / 0 = none           R/M
		;              x <  1 = ib             0 1 2 3 4 5 6 7
		;                 \ 2 = iw   x        /
		;                             \   __---___
		db 161, 203, 164,   0,   0, 0, 0, 00000000b ; [ BX + SI ]
		db 164, 203, 161,   0,   0, 0, 0, 00000000b ; [ SI + BX ]
		db 161, 203, 165,   0,   0, 0, 0, 00000001b ; [ BX + DI ]
		db 165, 203, 161,   0,   0, 0, 0, 00000001b ; [ DI + BX ]
		db 163, 203, 164,   0,   0, 0, 0, 00000010b ; [ BP + SI ]
		db 164, 203, 163,   0,   0, 0, 0, 00000010b ; [ SI + BP ]
		db 163, 203, 165,   0,   0, 0, 0, 00000011b ; [ BP + DI ]
		db 165, 203, 163,   0,   0, 0, 0, 00000011b ; [ DI + BP ]
		db 164,   0,   0,   0,   0, 0, 0, 00000100b ; [ SI ]
		db 165,   0,   0,   0,   0, 0, 0, 00000101b ; [ DI ]
		db 221,   0,   0,   0,   0, 0, 2, 00000110b ; [ imm16 ]
		db 220,   0,   0,   0,   0, 0, 2, 00000110b ; [ imm8 ]
		db 161,   0,   0,   0,   0, 0, 0, 00000111b ; [ BX ]
		db 161, 203, 164, 203, 220, 0, 1, 01000000b ; [ BX + SI + imm8 ]
		db 161, 203, 220, 203, 164, 0, 1, 01000000b ; [ BX + imm8 + SI ]
		db 164, 203, 161, 203, 220, 0, 1, 01000000b ; [ SI + BX + imm8 ]
		db 164, 203, 220, 203, 161, 0, 1, 01000000b ; [ SI + imm8 + BX ]
		db 220, 203, 161, 203, 164, 0, 1, 01000000b ; [ imm8 + BX + SI ]
		db 220, 203, 164, 203, 161, 0, 1, 01000000b ; [ imm8 + SI + BX ]
		db 161, 203, 165, 203, 220, 0, 1, 01000001b ; [ BX + DI + imm8 ]
		db 161, 203, 220, 203, 165, 0, 1, 01000001b ; [ BX + imm8 + DI ]
		db 165, 203, 161, 203, 220, 0, 1, 01000001b ; [ DI + BX + imm8 ]
		db 165, 203, 220, 203, 161, 0, 1, 01000001b ; [ DI + imm8 + BX ]
		db 220, 203, 161, 203, 165, 0, 1, 01000001b ; [ imm8 + BX + DI ]
		db 220, 203, 165, 203, 161, 0, 1, 01000001b ; [ imm8 + DI + BX ]
		db 163, 203, 164, 203, 220, 0, 1, 01000010b ; [ BP + SI + imm8 ]
		db 163, 203, 220, 203, 164, 0, 1, 01000010b ; [ BP + imm8 + SI ]
		db 164, 203, 163, 203, 220, 0, 1, 01000010b ; [ SI + BP + imm8 ]
		db 164, 203, 220, 203, 163, 0, 1, 01000010b ; [ SI + imm8 + BP ]
		db 220, 203, 164, 203, 163, 0, 1, 01000010b ; [ imm8 + SI + BP ]
		db 220, 203, 163, 203, 164, 0, 1, 01000010b ; [ imm8 + BP + SI ]
		db 163, 203, 165, 203, 220, 0, 1, 01000011b ; [ BP + DI + imm8 ]
		db 163, 203, 220, 203, 165, 0, 1, 01000011b ; [ BP + imm8 + DI ]
		db 165, 203, 163, 203, 220, 0, 1, 01000011b ; [ DI + BP + imm8 ]
		db 165, 203, 220, 203, 163, 0, 1, 01000011b ; [ DI + imm8 + BP ]
		db 220, 203, 163, 203, 165, 0, 1, 01000011b ; [ imm8 + BP + DI ]
		db 220, 203, 165, 203, 163, 0, 1, 01000011b ; [ imm8 + DI + BP ]
		db 164, 203, 220,   0,   0, 0, 1, 01000100b ; [ SI + imm8 ]
		db 220, 203, 164,   0,   0, 0, 1, 01000100b ; [ imm8 + SI ]
		db 165, 203, 220,   0,   0, 0, 1, 01000101b ; [ DI + imm8 ]
		db 220, 203, 165,   0,   0, 0, 1, 01000101b ; [ imm8 + DI ]
		db 163, 203, 220,   0,   0, 0, 1, 01000110b ; [ BP + imm8 ]
		db 220, 203, 163,   0,   0, 0, 1, 01000110b ; [ imm8 + BP ]
		db 161, 203, 220,   0,   0, 0, 1, 01000111b ; [ BX + imm8 ]
		db 220, 203, 161,   0,   0, 0, 1, 01000111b ; [ imm8 + BX ]
		db 161, 203, 164, 203, 221, 0, 2, 10000000b ; [ BX + SI + imm16 ]
		db 161, 203, 221, 203, 164, 0, 2, 10000000b ; [ BX + imm16 + SI ]
		db 164, 203, 161, 203, 221, 0, 2, 10000000b ; [ SI + BX + imm16 ]
		db 164, 203, 221, 203, 161, 0, 2, 10000000b ; [ SI + imm16 + BX ]
		db 221, 203, 164, 203, 161, 0, 2, 10000000b ; [ imm16 + SI + BX ]
		db 221, 203, 161, 203, 164, 0, 2, 10000000b ; [ imm16 + BX + SI ]
		db 161, 203, 165, 203, 221, 0, 2, 10000001b ; [ BX + DI + imm16 ]
		db 161, 203, 221, 203, 165, 0, 2, 10000001b ; [ BX + imm16 + DI ]
		db 165, 203, 161, 203, 221, 0, 2, 10000001b ; [ DI + BX + imm16 ]
		db 165, 203, 221, 203, 161, 0, 2, 10000001b ; [ DI + imm16 + BX ]
		db 221, 203, 165, 203, 161, 0, 2, 10000001b ; [ imm16 + DI + BX ]
		db 221, 203, 161, 203, 165, 0, 2, 10000001b ; [ imm16 + BX + DI ]
		db 163, 203, 164, 203, 221, 0, 2, 10000010b ; [ BP + SI + imm16 ]
		db 163, 203, 221, 203, 164, 0, 2, 10000010b ; [ BP + imm16 + SI ]
		db 164, 203, 163, 203, 221, 0, 2, 10000010b ; [ SI + BP + imm16 ]
		db 164, 203, 221, 203, 163, 0, 2, 10000010b ; [ SI + imm16 + BP ]
		db 221, 203, 164, 203, 163, 0, 2, 10000010b ; [ imm16 + SI + BP ]
		db 221, 203, 163, 203, 164, 0, 2, 10000010b ; [ imm16 + BP + SI ]
		db 163, 203, 165, 203, 221, 0, 2, 10000011b ; [ BP + DI + imm16 ]
		db 163, 203, 221, 203, 165, 0, 2, 10000011b ; [ BP + imm16 + DI ]
		db 165, 203, 163, 203, 221, 0, 2, 10000011b ; [ DI + BP + imm16 ]
		db 165, 203, 221, 203, 163, 0, 2, 10000011b ; [ DI + imm16 + BP ]
		db 221, 203, 165, 203, 163, 0, 2, 10000011b ; [ imm16 + DI + BP ]
		db 221, 203, 163, 203, 165, 0, 2, 10000011b ; [ imm16 + BP + DI ]
		db 164, 203, 221,   0,   0, 0, 2, 10000100b ; [ SI + imm16 ]
		db 221, 203, 164,   0,   0, 0, 2, 10000100b ; [ imm16 + SI ]
		db 165, 203, 221,   0,   0, 0, 2, 10000101b ; [ DI + imm16 ]
		db 221, 203, 165,   0,   0, 0, 2, 10000101b ; [ imm16 + DI ]
		db 163, 203, 221,   0,   0, 0, 2, 10000110b ; [ BP + imm16 ]
		db 221, 203, 163,   0,   0, 0, 2, 10000110b ; [ imm16 + BP ]
		db 161, 203, 221,   0,   0, 0, 2, 10000111b ; [ BX + imm16 ]
		db 221, 203, 161,   0,   0, 0, 2, 10000111b ; [ imm16 + BX ]
		db 0

	; ----------------------------------------------------------------------
	Mem.value	db 0, 0, 0, 0, 0, 0
	Mem.index	db 0
	Mem.rm		db 0
	Mem.isIbOrIw	db 0 ; 0=none 1=ib 2=iw 
	Mem.ib		db 0
	Mem.iw		dw 0
	Mem.iwIsLabel	dw 0

	; public methods
	; ----------------------------------------------------------------------

		Mem.clear:
		; --------------------------------------------------------------
				mov	byte [Mem.index], 0
				mov	byte [Mem.rm], 0
				mov	byte [Mem.isIbOrIw], 0
				mov	byte [Mem.ib], 0
				mov	word [Mem.iw], 0
				mov	word [Mem.iwIsLabel], 0
				mov	cx, Mem.VALUE_LENGTH
				mov	bx, Mem.value
			.clearNextChar:
				mov	byte [bx], 0
				inc	bx
				loop	.clearNextChar
				ret

		Mem.addTokenId:
		; --------------------------------------------------------------
		; al = token id
		; ah = 0 - overflow !
		;      1 - success
				mov	bh, 0
				mov	bl, [Mem.index]
				cmp	bl, Mem.VALUE_LENGTH
				je	.overflow
			.success:
				mov	di, Mem.value
				mov	byte [bx + di], al
				inc	byte [Mem.index]
				mov	ah, 1
				ret
			.overflow:
				mov	ah, 0
				ret

		Mem.classify:
		; --------------------------------------------------------------
		; ah = 0 - not is valid mem !
		;      1 - success
				mov	si, Mem.validOperations
				mov	di, Mem.value
			.compareNext:
				cmp	byte [si], 0
				jz	.false
				call	os_string_compare
				jc	.true
				add	si, Mem.VALUE_LENGTH
				jmp	.compareNext
			.true:
				mov	al, [si + 6]
				mov	byte [Mem.isIbOrIw], al
				mov	al, [si + 7]
				mov	byte [Mem.rm], al
				mov	ah, 1
				ret
			.false:
				mov	ah, 0
				ret

;===============================================================================

