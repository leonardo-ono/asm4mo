;===============================================================================
; class LabelResolver
;
; vai guardando todos os label (imm) que sao usados
; como um dos operadores de uma instrucao
;===============================================================================

	; includes
	; ----------------------------------------------------------------------

	; public static constants
	; ----------------------------------------------------------------------
	LabelResolver:
		.TYPE_IB	EQU 1
		.TYPE_IW	EQU 2
		.TYPE_RB	EQU 3
		.TYPE_RW	EQU 4

	; private static constants
	; ----------------------------------------------------------------------

		;                 0123456789012345678   
		; mov ax, label > label________0aally  aa = address (offset) of label (org)
		;                 1234567890123411212  ll = address where value must be corrected
		;                                       t = type (r->relative i->immediate)

		.LABEL_LENGTH		equ 32  ;  13 bytes for label + 1 byte (end of string) 
						; + 1 byte for type (r->relative i->immediate)
						; + 2 bytes for address (offset) of label (org)
						; + 2 bytes for address where value must be corrected

		.MAX_SIZE		equ 3200  ; allows max 100 labels


	; public static methods
	; ----------------------------------------------------------------------
		.index			dw 0
		.startMemoryAddress	dw 60335 ; 63935 (LabelHandler) - 3200

		LabelResolver.add:
		; --------------------------------------------------------------
		; ax = pointer to label string
		; dx = address (offset) of label (org)
		; bx = address where value must be corrected
		; cl = LabelResolver.TYPE_XX
		;      
		; si = 0 - stack overflow !
		;      1 - ok
		;      2 - label length too long
				mov	word [.provAX], ax
				mov	word [.provBX], bx
				mov	word [.provCX], cx
				mov	word [.provDX], dx
				pusha
				call	os_string_length
				cmp	ax, (LabelResolver.LABEL_LENGTH-3)
				popa
				jg	.labelLengthTooLong
				mov	si, ax
				mov	ax, [LabelResolver.index]
				cmp	ax, LabelResolver.MAX_SIZE
				jge	.stackOverflow
				mov	bx, [LabelResolver.startMemoryAddress]
				mov	di, [LabelResolver.index]
			.nextChar:
				mov	al, [si]
				mov	byte [bx + di], al
				inc	si	
				inc	di
				inc	word [LabelResolver.index]
				cmp	al, 0
				je	.ok
				jmp	.nextChar
			.ok:
				mov	cx, di
				and	cx, 0fh
				mov	ax, 14
				sub	ax, cx
				add	di, ax
				mov	word [bx + di], dx
				add	di, 2
				mov	dx, [.provBX]
				mov	word [bx + di], dx
				inc	di
				mov	dx, [.provCX]
				mov	byte [bx + di], dl
				mov	word [LabelResolver.index], di
				mov	si, 1
				ret
			.labelLengthTooLong:
				mov	si, 2
				ret
			.stackOverflow:
				mov	si, 0
				ret
			.provAX dw 0
			.provBX dw 0
			.provCX dw 0
			.provDX dw 0

		LabelResolver.getOffset:
		; --------------------------------------------------------------
		; ax = pointer to label string
		; ret dx = address (offset) of label (org)
		;     bx = address where value must be corrected
		;     cl = LabelResolver.TYPE_XX
		;     si = 0 - label not found !
		;          1 - ok
				mov	si, ax
				mov	di, [LabelResolver.startMemoryAddress]
			.nextLabel:
				mov	al, [di]
				cmp	al, 0 ; end of list ?
				je	.notFound
				call	os_string_compare
				jc	.found
				add	di, LabelResolver.LABEL_LENGTH
				jmp	.nextLabel
			.found:
				mov	dx, [di + 14]
				mov	bx, [di + 16]
				mov	cl, [di + 17]
				mov	si, 1
				ret
			.notFound
				mov	si, 0
				ret

;===============================================================================

